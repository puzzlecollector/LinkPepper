# Generated by Django 5.2.6 on 2025-10-12 09:53

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CampaignApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=64)),
                ('country', models.CharField(blank=True, max_length=64)),
                ('campaign_title', models.CharField(blank=True, max_length=180)),
                ('website_url', models.URLField(blank=True)),
                ('website_description', models.TextField(blank=True)),
                ('wants_visit', models.BooleanField(default=False)),
                ('wants_link', models.BooleanField(default=True)),
                ('visit_code', models.CharField(blank=True, help_text='Verification code users must find', max_length=64)),
                ('expected_review_keywords', models.CharField(blank=True, max_length=400)),
                ('current_seo_keywords', models.CharField(blank=True, max_length=400)),
                ('reward_pool_usdt', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('payout_per_task_usdt', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('airdrop_enabled', models.BooleanField(default=False)),
                ('airdrop_first_n', models.PositiveIntegerField(blank=True, null=True)),
                ('airdrop_amount_per_user', models.DecimalField(blank=True, decimal_places=8, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('airdrop_token_symbol', models.CharField(blank=True, max_length=24)),
                ('airdrop_network', models.CharField(blank=True, max_length=48)),
                ('airdrop_note', models.CharField(blank=True, max_length=240)),
                ('thumbnail_url', models.URLField(blank=True)),
                ('favicon_url', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('handled', models.BooleanField(default=False, help_text='Mark true once an admin has responded/converted to a Campaign.')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalletUser',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('address', models.CharField(db_index=True, max_length=128, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=120)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('nonce', models.CharField(blank=True, help_text='Random challenge for signature verification', max_length=180)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('slug', models.SlugField(blank=True, max_length=220, unique=True)),
                ('title', models.CharField(max_length=180)),
                ('summary', models.CharField(blank=True, max_length=300)),
                ('long_description', models.TextField(blank=True)),
                ('task_type', models.CharField(choices=[('VISIT', 'Visit'), ('LINK', 'Link'), ('MIXED', 'Mixed (legacy)')], default='VISIT', max_length=12)),
                ('client_site_domain', models.CharField(blank=True, max_length=180)),
                ('rules', models.TextField(blank=True)),
                ('code_instructions', models.TextField(blank=True, help_text='How VISIT participants can find the code')),
                ('seo_keywords', models.CharField(blank=True, max_length=400)),
                ('image_url', models.URLField(blank=True)),
                ('favicon_url', models.URLField(blank=True)),
                ('pool_usdt', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('payout_usdt', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('start', models.DateField()),
                ('end', models.DateField()),
                ('airdrop_enabled', models.BooleanField(default=False)),
                ('airdrop_first_n', models.PositiveIntegerField(blank=True, null=True)),
                ('airdrop_amount_per_user', models.DecimalField(blank=True, decimal_places=8, max_digits=18, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('airdrop_token_symbol', models.CharField(blank=True, max_length=24)),
                ('airdrop_network', models.CharField(blank=True, max_length=48)),
                ('airdrop_note', models.CharField(blank=True, max_length=240)),
                ('is_published', models.BooleanField(default=False, help_text='Published campaigns appear on /rewards and details pages.')),
                ('is_paused', models.BooleanField(default=False, help_text='Pause to stop accepting new submissions without unpublishing.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='core.campaignapplication')),
            ],
            options={
                'ordering': ['-start', '-id'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('wallet_address', models.CharField(max_length=128)),
                ('network', models.CharField(choices=[('ETH', 'Ethereum'), ('SOL', 'Solana'), ('BNB', 'BNB Chain'), ('POL', 'Polygon')], max_length=8)),
                ('post_url', models.URLField(blank=True)),
                ('comment', models.TextField(blank=True)),
                ('visited_url', models.URLField(blank=True)),
                ('code_entered', models.CharField(blank=True, max_length=64)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('PAID', 'Paid')], default='PENDING', max_length=12)),
                ('proof_score', models.PositiveSmallIntegerField(blank=True, help_text='Admin-assigned proof-of-work score (e.g., quality/DA)', null=True)),
                ('reviewer_note', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_paid', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='core.campaign')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_submissions', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submissions', to='core.walletuser')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payout',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('amount_usdt', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('token_symbol', models.CharField(default='USDT', help_text='What was sent (e.g., USDT, PEPE, BONK)', max_length=16)),
                ('network', models.CharField(choices=[('ETH', 'Ethereum'), ('SOL', 'Solana'), ('BNB', 'BNB Chain'), ('POL', 'Polygon')], max_length=8)),
                ('tx_hash', models.CharField(blank=True, max_length=120)),
                ('paid_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.CharField(blank=True, max_length=240)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payouts', to='core.campaign')),
                ('paid_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payouts_made', to=settings.AUTH_USER_MODEL)),
                ('submission', models.OneToOneField(help_text='One payout per submission (simplest model).', on_delete=django.db.models.deletion.CASCADE, related_name='payout', to='core.submission')),
            ],
            options={
                'ordering': ['-paid_at'],
                'constraints': [models.UniqueConstraint(fields=('submission',), name='one_payout_per_submission')],
            },
        ),
        migrations.AddIndex(
            model_name='submission',
            index=models.Index(fields=['campaign', 'status'], name='core_submis_campaig_438f60_idx'),
        ),
        migrations.AddIndex(
            model_name='submission',
            index=models.Index(fields=['wallet_address'], name='core_submis_wallet__6116b8_idx'),
        ),
    ]
